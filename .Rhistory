return(dfFromTo)
}
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 13
prefNameDestinationTokyo <- "東京都"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 13101
cityNameDestination <- "千代田区"
Chiyoda <- download_resas(prefCodeDestinationTokyo,cityCodeDestination)
Chiyoda <- resas_dataframe(Chiyoda)
dataChiyoda <- tibble(count = apply(Chiyoda[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gChiyoda <- ggplot(dataChiyoda[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'Chiyoda')
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 13
prefNameDestinationTokyo <- "東京都"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 13102
cityNameDestination <- "中央区"
Tyuou <- download_resas(prefCodeDestinationTokyo,cityCodeDestination)
Tyuou <- resas_dataframe(Tyuou)
dataTyuou <- tibble(count = apply(Tyuou[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gTyuou <- ggplot(dataTyuou[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'Tyuou')
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 13
prefNameDestinationTokyo <- "東京都"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 13103
cityNameDestination <- "港区"
Minato <- download_resas(prefCodeDestinationTokyo,cityCodeDestination)
Minato <- resas_dataframe(Minato)
dataMinato <- tibble(count = apply(Minato[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gMinato <- ggplot(dataMinato[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'Minato')
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 13
prefNameDestinationTokyo <- "東京都"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 13104
cityNameDestination <- "新宿区"
Shinjuku <- download_resas(prefCodeDestinationTokyo,cityCodeDestination)
Shinjuku <- resas_dataframe(Shinjuku)
dataShinjuku <- tibble(count = apply(Shinjuku[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gShinjuku <- ggplot(dataShinjuku[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'Shinjuku')
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 13
prefNameDestinationTokyo <- "東京都"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 13106
cityNameDestination <- "台東区"
Taitou <- download_resas(prefCodeDestinationTokyo,cityCodeDestination)
Taitou <- resas_dataframe(Taitou)
dataTaitou <- tibble(count = apply(Taitou[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gTaitou <- ggplot(dataTaitou[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'Taitou')
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 13
prefNameDestinationTokyo <- "東京都"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 13113
cityNameDestination <- "渋谷区"
Shibuya <- download_resas(prefCodeDestinationTokyo,cityCodeDestination)
Shibuya <- resas_dataframe(Shibuya)
dataShibuya <- tibble(count = apply(Shibuya[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gShibuya <- ggplot(dataShibuya[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'Shibuya')
gridExtra::grid.arrange(gChiyoda,gTyuou,gMinato,gShinjuku,gTaitou,gShibuya)
#------------------------------------------------
#RESAS-APIよりデータダウンロード
#------------------------------------------------
#Web APIの使用はRESAS APIのウェブページを確認
apiKey <- 'QfQSjugOnB3K5yplJYbyzId7EEtTbEr5WEOoENWF'
download_resasOsaka <- function(cityCodeDestination){
#API Endpoint
urlBase <- "https://opendata.resas-portal.go.jp/"
#項目識別用URI
urlItem <- "api/v1/partner/docomo/destination"
#パラメータ値
urlParam <- paste0("?year=2016&month=04&periodOfDay=1&periodOfTime=20&gender=-&ageRange=-")
#滞在先の市区町村コード
urlParamDestination <-
paste0("&prefCodeDestination=", str_sub(cityCodeDestination,1,2), "&cityCodeDestination=", cityCodeDestination)
#居住先の市区町村コード
urlParamResidence <- paste0("&prefCodeResidence=",str_sub(cityCodeDestination,1,2),"&cityCodeResidence=-")
#httrパッケージのGET()よりJSONデータを取得
#add_headers()にAPIキーを追加する必要あり
getJson <-
httr::GET(
paste0(urlBase, urlItem, urlParam, urlParamDestination, urlParamResidence),
add_headers("X-API-KEY" = apiKey)
)
#JSON形式のデータを見る場合は，content()コマンドを利用
listGetJson <- content(getJson)
return(listGetJson)
}
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 27
prefNameDestinationTokyo <- "大阪府"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 27124
cityNameDestination <- "大阪市"
Osakalist <- list(27102, 27103, 27104, 27105, 27106, 27107, 27108, 27109, 27111, 27112, 27113, 27114, 27115,27116, 27117, 27118, 27119, 27120, 27121, 27122, 27123, 27124, 27125, 27126, 27127, 27128)
OsakaCity <- lapply(Osakalist,download_resasOsaka)
OsakaCities <-list()
for (i in OsakaCity){
OsakaCities <- append(OsakaCities,resas_dataframe(i))
}
Chiyoda$result$prefs[[1]]$cities[1:50][[1]]
total <- as.numeric(lapply(listGetJson$result$prefs[[1]]$cities, function(x) {c(x$total)}))
gridExtra::grid.arrange(gChiyoda,gTyuou,gMinato,gShinjuku,gTaitou,gShibuya)
#------------------------------------------------
#RESAS-APIよりデータダウンロード
#------------------------------------------------
#Web APIの使用はRESAS APIのウェブページを確認
apiKey <- 'QfQSjugOnB3K5yplJYbyzId7EEtTbEr5WEOoENWF'
download_resasOsaka <- function(cityCodeDestination){
#API Endpoint
urlBase <- "https://opendata.resas-portal.go.jp/"
#項目識別用URI
urlItem <- "api/v1/partner/docomo/destination"
#パラメータ値
urlParam <- paste0("?year=2016&month=04&periodOfDay=1&periodOfTime=20&gender=-&ageRange=-")
#滞在先の市区町村コード
urlParamDestination <-
paste0("&prefCodeDestination=", str_sub(cityCodeDestination,1,2), "&cityCodeDestination=", cityCodeDestination)
#居住先の市区町村コード
urlParamResidence <- paste0("&prefCodeResidence=",str_sub(cityCodeDestination,1,2),"&cityCodeResidence=-")
#httrパッケージのGET()よりJSONデータを取得
#add_headers()にAPIキーを追加する必要あり
getJson <-
httr::GET(
paste0(urlBase, urlItem, urlParam, urlParamDestination, urlParamResidence),
add_headers("X-API-KEY" = apiKey)
)
#JSON形式のデータを見る場合は，content()コマンドを利用
listGetJson <- content(getJson)
return(listGetJson)
}
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 27
prefNameDestinationTokyo <- "大阪府"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 27124
cityNameDestination <- "大阪市"
Osakalist <- list(27102, 27103, 27104, 27105, 27106, 27107, 27108, 27109, 27111, 27112, 27113, 27114, 27115,27116, 27117, 27118, 27119, 27120, 27121, 27122, 27123, 27124, 27125, 27126, 27127, 27128)
OsakaCity <- lapply(Osakalist,download_resasOsaka)
OsakaCities <-list()
for (i in OsakaCity){
OsakaCities <- append(OsakaCities,resas_dataframe(i))
}
View(OsakaCities)
#------------------------------------------------
#RESAS-APIよりデータダウンロード
#------------------------------------------------
#Web APIの使用はRESAS APIのウェブページを確認
apiKey <- 'QfQSjugOnB3K5yplJYbyzId7EEtTbEr5WEOoENWF'
download_resasOsaka <- function(cityCodeDestination){
#API Endpoint
urlBase <- "https://opendata.resas-portal.go.jp/"
#項目識別用URI
urlItem <- "api/v1/partner/docomo/destination"
#パラメータ値
urlParam <- paste0("?year=2016&month=04&periodOfDay=1&periodOfTime=20&gender=-&ageRange=-")
#滞在先の市区町村コード
urlParamDestination <-
paste0("&prefCodeDestination=", str_sub(cityCodeDestination,1,2), "&cityCodeDestination=", cityCodeDestination)
#居住先の市区町村コード
urlParamResidence <- paste0("&prefCodeResidence=",str_sub(cityCodeDestination,1,2),"&cityCodeResidence=-")
#httrパッケージのGET()よりJSONデータを取得
#add_headers()にAPIキーを追加する必要あり
getJson <-
httr::GET(
paste0(urlBase, urlItem, urlParam, urlParamDestination, urlParamResidence),
add_headers("X-API-KEY" = apiKey)
)
#JSON形式のデータを見る場合は，content()コマンドを利用
listGetJson <- content(getJson)
Sys.sleep(3)
return(listGetJson)
}
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 27
prefNameDestinationTokyo <- "大阪府"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 27124
cityNameDestination <- "大阪市"
Osakalist <- list(27102, 27103, 27104, 27105, 27106, 27107, 27108, 27109, 27111, 27112, 27113, 27114, 27115,27116, 27117, 27118, 27119, 27120, 27121, 27122, 27123, 27124, 27125, 27126, 27127, 27128)
OsakaCity <- lapply(Osakalist,download_resasOsaka)
View(OsakaCity)
#滞在先（都道府県コード・都道府県名）
prefCodeDestinationTokyo <- 27
prefNameDestinationTokyo <- "大阪府"
#滞在先（市区町村コード・市区町村名）
cityCodeDestination <- 27124
cityNameDestination <- "大阪市"
Osakalist <- list(27102, 27103, 27104, 27106, 27107, 27108, 27109, 27111,27113, 27114, 27115,27116, 27117, 27118, 27119, 27120, 27121, 27122, 27123, 27124, 27125, 27126, 27127, 27128)
OsakaCity <- lapply(Osakalist,download_resasOsaka)
View(OsakaCity)
OsakaCity <- lapply(OsakaCity,resas_dataframe)
View(OsakaCity)
dplyr::bind_rows(OsakaCity)
dplyr::bind_cols(OsakaCity)
dplyr::bind_rows(OsakaCity)
dataOsakaCity <- tibble(count = apply(OsakaCity[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
OsakaCity <- OsakaCity %>%
dplyr::bind_rows(OsakaCity)
dataOsakaCity <- tibble(count = apply(OsakaCity[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gOsakaCity <- ggplot(dataShibuya[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'OsakaCity')
plot(gOsakaCity)
dataOsakaCity <- tibble(count = apply(OsakaCity[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gOsakaCity <- ggplot(dataShibuya[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'OsakaCity')
plot(gOsakaCity)
gridExtra::grid.arrange(gChiyoda,gTyuou,gMinato,gShinjuku,gTaitou,gShibuya)
#画像出力
tmap_mode("view")
#インタラクティブな地図
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.7
)
#地図による可視化
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans")
#画像出力
tmap_mode("view")
#地図による可視化
#インタラクティブな地図
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.7
) +
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans")
#画像出力
tmap_mode("view")
#地図による可視化
#インタラクティブな地図
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.9
) +
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans")
#画像出力
tmap_mode("view")
#地図による可視化
#インタラクティブな地図
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
) +
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans")
#画像出力
tmap_mode("view")
#地図による可視化
#インタラクティブな地図
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6
)
#画像出力
tmap_mode("view")
#地図による可視化
#インタラクティブな地図
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.4
)
#画像出力
tmap_mode("view")
#地図による可視化
#インタラクティブな地図
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.5
)
#画像出力
tmap_mode("view")
#地図による可視化
tm_shape(sfMeshClipDataTokyo) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordAmuse",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfTokyo) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tm_shape(Tokyo) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.5
)
#画像出力
tmap_mode("view")
#地図による可視化
tm_shape(sfMeshClipDataOsaka) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordAmuse",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfOsaka) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tmap_mode('plot')
tm_shape(Osaka) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.5
)
#画像出力
tmap_mode("view")
#地図による可視化
tm_shape(sfMeshClipDataOsaka) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordAmuse",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfOsaka) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tm_shape(Osaka) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.5
)
#画像出力
tmap_mode("view")
#地図による可視化
tm_shape(sfMeshClipDataOsaka) +
tm_basemap("OpenStreetMap.Mapnik") +
tm_borders(lwd = 0.2) +
tm_fill("getisordEstb",
lwd = 0,
midpoint = 0,
palette = "-RdBu",
alpha = 0.6,
title = "Getis-Ord G*i(d)",
breaks = c(-Inf, -2.58, -1.96, 1.96, 2.58, Inf)) +
tm_shape(dfOsaka) +
tm_borders() +
tm_layout(fontfamily = "sans") +
tm_shape(Osaka) +
tm_borders(col = "white") +
tm_fill(id = 'cityName',
col = "patients_100000",
style = "quantile",
palette = "BuGn",
n = 6,
alpha = 0.5
)
gridExtra::grid.arrange(gChiyoda,gTyuou,gMinato,gShinjuku,gTaitou,gShibuya)
dataOsakaCity <- tibble(count = apply(OsakaCity[7:14],2,sum),ages = c('all',"age15","age20","age30","age40","age50","age60","age70"))
gOsakaCity <- ggplot(dataShibuya[c(2:8),], aes(x = ages, y = count))+
geom_bar(stat = "identity") +
labs(title = 'OsakaCity')
plot(gOsakaCity)
