"0","#東京都と大阪府ののメッシュ地図のみ抽出する関数を定義する"
"0","#sfパッケージのst_intersectionで両シェープファイルの重なる部分を抽出"
"0","meshExtraction <- function(sfMesh,sfCity){"
"0","  sfMeshClip <- sf::st_intersection(sfMesh, sfCity)"
"0","  "
"0","  #対象地域のメッシュコードを抽出する"
"0","  dfCommon <- tibble::tibble(KEY_CODE = sfMeshClip$KEY_CODE)"
"0","  "
"0","  #対象メッシュの地域のみを残す"
"0","  sfMeshClip <- dplyr::inner_join(sfMesh, dfCommon, by = ""KEY_CODE"") %>%"
"0","    dplyr::distinct(KEY_CODE, .keep_all = TRUE)"
"0","  return(sfMeshClip)"
"0","}"
"0",""
"0","sfMeshClipTokyo <- meshExtraction(sfMeshTokyo,dfTokyo)"
"2","although coordinates are longitude/latitude, st_intersection assumes that they are planar
"
"2","attribute variables are assumed to be spatially constant throughout all geometries"
"0","sfMeshClipOsaka <- meshExtraction(sfMeshOsaka,dfOsaka)"
"2","although coordinates are longitude/latitude, st_intersection assumes that they are planar
"
"2","attribute variables are assumed to be spatially constant throughout all geometries"
